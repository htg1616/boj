#include <bits/stdc++.h>
#define endl '\n'
#define X first
#define Y second
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

constexpr int INF = 1'000'000;

template <typename T>
class segment_tree{
    int n;
    vector<T> tree;

    void init(int v, int tl, int tr, const vector<T>& a){
        if(tr-tl == 1) tree[v] = a[tl];
        else{
            int tm = (tl+tr)/2;
            init(2*v, tl, tm, a);
            init(2*v+1, tm, tr, a);
            tree[v] = min(tree[2*v], tree[2*v+1]);
        }
    }

    void update(int v, int tl, int tr, int i, T x){
        if(tr-tl==1){
            tree[v] = x;
            return;
        }
        int tm = (tl+tr)/2;
        if(i < tm) update(2*v, tl, tm, i, x);
        else update(2*v+1, tm, tr, i, x);
        tree[v] = min(tree[2*v], tree[2*v+1]);
    }

    T query(int v, int tl, int tr, int l, int r){
        if(l>=tr || r<=tl) return T(INF);
        if(l<=tl && tr<=r) return tree[v];
        int tm = (tl+tr)/2;
        return min(query(2*v, tl, tm, l, r), query(2*v+1, tm, tr, l, r));
    }

public:
    segment_tree(const vector<T>& a){
        n = a.size();
        tree.resize(4*n);
        init(1, 0, n, a);
    }
    
    segment_tree(int n_=1<<18){
        n = n_;
        tree.resize(4*n);
        vector<T> a(n);
        init(1, 0, n, a);
    }
    
    void update(int i, T x){
        update(1, 0, n, i, x);
    }

    T query(int l, int r){
        return query(1, 0, n, l, r);
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    int n;
    cin >> n;
    vector<int> A(n), B(n), C(n);
    vector<vector<int>> students(n, vector<int>(3));
    for(int i=0; i<n; i++){
        cin >> A[i]; A[i]--;
        students[A[i]][0] = i;
    }
    for(int i=0; i<n; i++){
        cin >> B[i]; B[i]--;
        students[B[i]][1] = i;
    }
    for(int i=0; i<n; i++){
        cin >> C[i]; C[i]--;
        students[C[i]][2] = i;
    }

    vector<int> temp(n, INF);
    segment_tree<int> seg(temp);
    int ans = 0;
    for(int i: A){
        if(students[i][2] < seg.query(0, students[i][1])) ans++;
        seg.update(students[i][1], students[i][2]);
    }

    cout << ans << endl;
    return 0;
}