#include <bits/stdc++.h>
#define endl '\n'
#define X first
#define Y second
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

struct DSU{
    int n;
    vector<int> parent;

    DSU(int _n){
        n = _n;
        parent.resize(n);
        iota(parent.begin(), parent.end(), 0);
    }

    int find(int v){
        if(v != parent[v]) parent[v] = find(parent[v]);
        return parent[v];
    }

    void merge(int u, int v){
        u = find(u);
        v = find(v);
        parent[u] = v;
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    int n;
    cin >> n;
    vector<vector<int>> points(n);
    for(int i=0; i<n; i++){
        int x, y, z;
        cin >> x >> y >> z;
        points[i] = {i, x, y, z};
    }

    vector<vector<int>> edges;
    for(int i=1; i<=3; i++){
        sort(points.begin(), points.end(), [&](const vector<int> &p1, const vector<int> &p2){
            return p1[i] < p2[i];
        });
        for(int j=0; j<n-1; j++){
            vector<int> edge = {points[j+1][i] - points[j][i], points[j][0], points[j+1][0]};
            edges.push_back(edge);
        }
    }

    sort(edges.begin(), edges.end());
    DSU dsu(n);
    ll ans = 0;
    for(auto &e: edges){
        int cost = e[0], u = e[1], v = e[2];
        if(dsu.find(u) != dsu.find(v)){
            ans += cost;
            dsu.merge(u, v);
        }
    }

    cout << ans;
}