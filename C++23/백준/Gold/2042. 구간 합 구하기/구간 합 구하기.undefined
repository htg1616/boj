#include <bits/stdc++.h>
#define endl '\n'
#define X first
#define Y second
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

template <typename T>
class segment_tree{
    int n;
    vector<T> tree;

    void init(int v, int tl, int tr, const vector<T>& a){
        if(tr-tl == 1) tree[v] = a[tl];
        else{
            int tm = (tl+tr)/2;
            init(2*v, tl, tm, a);
            init(2*v+1, tm, tr, a);
            tree[v] = tree[2*v] + tree[2*v+1];
        }
    }

    void update(int v, int tl, int tr, int i, T x){
        if(tr-tl==1){
            tree[v] = x;
            return;
        }
        int tm = (tl+tr)/2;
        if(i < tm) update(2*v, tl, tm, i, x);
        else update(2*v+1, tm, tr, i, x);
        tree[v] = tree[2*v] + tree[2*v+1];
    }

    T query(int v, int tl, int tr, int l, int r){
        if(l>=tr || r<=tl) return T();
        if(l<=tl && tr<=r) return tree[v];
        int tm = (tl+tr)/2;
        return query(2*v, tl, tm, l, r) + query(2*v+1, tm, tr, l, r);
    }

public:
    segment_tree(const vector<T>& a){
        n = a.size();
        tree.resize(4*n);
        init(1, 0, n, a);
    }
    
    segment_tree(int n=1<<18){
        n = n;
        tree.resize(4*n);
        init(1, 0, n, vector<T>(n));
    }
    
    void update(int i, T x){
        update(1, 0, n, i, x);
    }


    T query(int l, int r){
        return query(1, 0, n, l, r);
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    int n, m, k;
    cin >> n >> m >> k;
    int q = m+k;

    vector<__int128_t> arr(n);
    for(int i=0; i<n; i++){
        ll buf;
        cin >> buf;
        arr[i] = buf;
    }
    segment_tree<__int128_t> seg(arr);

    while(q--){
        ll a, b, c;
        cin >> a >> b >> c;
        if(a==1) seg.update(b-1, c);
        else cout << (ll)seg.query(b-1, c) << endl;
    }
    return 0;
}