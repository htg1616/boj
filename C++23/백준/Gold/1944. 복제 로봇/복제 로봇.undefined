#include <bits/stdc++.h>
#define endl '\n'
#define X first
#define Y second
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef tuple<int, int, int> Edge;

constexpr int INF = 1'000'000;
int dx[] = {-1, 1, 0, 0}, dy[] = {0, 0, -1, 1};

struct DSU {
    int n;
    vector<int> p;
    vector<int> size;

    DSU(int _n){
        n = _n;
        p.resize(n);
        iota(p.begin(), p.end(), 0);
        size = vector<int>(n, 1);
    }

    int find(int u){
        if(u != p[u]) p[u] = find(p[u]);
        return p[u];
    }

    void merge(int u, int v){
        u = find(u);
        v = find(v);
        if(u == v) return;
        if(size[u] < size[v]) swap(u, v);
        p[v] = u;
        size[u] += size[v];
    }

   bool same(int u, int v){
      return find(u) == find(v);
   }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    int n, m;
    cin >> n >> m;
    vector<vector<int>> field(n, vector<int>(n));
    vector<pii> nodes;
    for(int i=0; i<n; i++){
        string s;
        cin >> s;
        for(int j=0; j<n; j++){
            if(s[j] == 'S' || s[j] == 'K') nodes.emplace_back(i, j);
            if(s[j] == '1') field[i][j] = 1;
            else field[i][j] = 0;
        }
    }

    auto dfs_start = [&](int ix, int iy){
        vector<vector<int>> dist(n, vector<int>(n, INF));
        dist[ix][iy] = 0;
        queue<pii> q;
        q.emplace(ix, iy);

        while(!q.empty()){
            auto [x, y] = q.front(); q.pop();
            for(int i=0; i<4; i++){
                int nx = x+dx[i], ny = y+dy[i];
                if(nx < 0 || nx >= n || ny < 0 || ny >= n) continue;
                if(field[nx][ny] == 1 || dist[nx][ny] != INF) continue;
                dist[nx][ny] = dist[x][y] + 1;
                q.emplace(nx, ny);
            }
        }
        return dist;
    };

    vector<Edge> edges;
    for(int i=0; i<m+1; i++){
        auto dist = dfs_start(nodes[i].first, nodes[i].second);
        for(int j=i+1; j<m+1; j++){
            auto [x, y] = nodes[j];
            if(dist[x][y] != INF) edges.emplace_back(dist[x][y], i, j);
        }
    }

    sort(edges.begin(), edges.end());
    DSU dsu(m+1);
    int ans = 0;
    int cnt = 0;
    for(auto [w, u, v]: edges){
        if(dsu.find(u) != dsu.find(v)){
            dsu.merge(u, v);
            ans += w;
            cnt++;
        }
    }

    if(cnt == m) cout << ans;
    else cout << -1;
    return 0;
}