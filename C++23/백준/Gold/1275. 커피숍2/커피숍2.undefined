#include <bits/stdc++.h>
#define endl '\n'
#define X first
#define Y second
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

class segment_tree{
    int n;
    vector<ll> tree;

    void init(int v, int tl, int tr, const vector<int> &a){
        if(tr-tl==1){
            tree[v] = a[tl];
            return;
        }

        int tm = (tl+tr)/2;
        init(2*v, tl, tm, a);
        init(2*v+1, tm, tr, a);
        tree[v] = tree[2*v] + tree[2*v+1];
    }

    ll query(int v, int tl, int tr, int l, int r){
        if(tl>=r || tr<=l) return 0;
        if(l<=tl && tr<=r) return tree[v];
        int tm = (tl+tr)/2;
        return query(2*v, tl, tm, l, r) + query(2*v+1, tm, tr, l, r);
    }

    void update(int v, int tl, int tr, int i, int x){
        if(tr-tl==1){
            tree[v] = x;
            return;
        }
        int tm = (tl+tr)/2;
        if(i<tm) update(2*v, tl, tm, i, x);
        else update(2*v+1, tm, tr, i, x);
        tree[v] = tree[2*v] + tree[2*v+1];
    }

public:
    segment_tree(const vector<int> &a){
        n = a.size();
        tree.resize(4*n);
        init(1, 0, n, a);
    }

    ll query(int l, int r){
        return query(1, 0, n, l, r);
    }

    void update(int i, int x){
        update(1, 0, n, i, x);
    }
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    int n, q;
    cin >> n >> q;
    vector<int> arr(n);
    for(int i=0; i<n; i++) cin >> arr[i];

    segment_tree seg(arr);
    while(q--){
        int x, y, a, b;
        cin >> x >> y >> a >> b;
        cout << seg.query(min(x, y)-1, max(x, y)) << endl;
        seg.update(a-1, b);
    }
    return 0;
}